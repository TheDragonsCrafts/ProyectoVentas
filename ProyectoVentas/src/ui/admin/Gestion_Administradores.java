/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.admin;

import datos.AdministradorDatos;
import entidades.Administrador;
import ui.menu.Menu_Principal;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.List;
import ui.login.LoginFrame;

/**
 * JFrame para gestionar administradores: listar, crear, editar, eliminar y activar/desactivar.
 * Maneja la lógica para proteger al administrador maestro y asegurar la transferencia de rol.
 */
public class Gestion_Administradores extends javax.swing.JFrame {

    private final AdministradorDatos adminDatos = new AdministradorDatos();

    /**
     * Constructor. Inicializa componentes y carga la lista de administradores.
     */
    public Gestion_Administradores() {
        initComponents();
        setLocationRelativeTo(null); // Centrar ventana
        cargarAdministradores();
    }

    /**
     * Actualiza la JTable con la lista de administradores proporcionada.
     * @param administradores Lista de administradores a mostrar.
     */
    private void actualizarTabla(List<Administrador> administradores) {
        String[] columnNames = {"ID", "Usuario", "Nombre Completo", "Correo", "Activo", "Rol"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que la tabla no sea editable directamente.
            }
        };

        for (Administrador admin : administradores) {
            Object[] row = new Object[]{
                admin.id(),
                admin.usuario(),
                admin.nombreCompleto(),
                admin.correo(),
                admin.activo() ? "Sí" : "No",
                admin.adminMaestro() ? "Maestro" : "Estándar"
            };
            model.addRow(row);
        }
        jTable1.setModel(model);
    }

    /**
     * Carga todos los administradores desde la base de datos y los muestra en la tabla.
     * Maneja excepciones durante la carga.
     */
    private void cargarAdministradores() {
        try {
            List<Administrador> administradores = adminDatos.listarTodos();
            actualizarTabla(administradores);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar administradores: " + e.getMessage(), "Error de Carga", JOptionPane.ERROR_MESSAGE);
            // Considerar loguear e.printStackTrace() en un sistema de logging real.
        }
    }

    /**
     * Código generado por NetBeans para inicializar el formulario.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BtnEliminarAdmin = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        BtnBuscarAdmin = new javax.swing.JButton();
        BtnEditar = new javax.swing.JButton();
        BtnNuevoAdmin = new javax.swing.JButton();
        BtnActivarDesactivarAdmin = new javax.swing.JButton();
        BtnRegresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 0, 24)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Usuario", "Nombre Completo", "Correo", "Activo", "Rol"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        BtnEliminarAdmin.setBackground(new java.awt.Color(0, 0, 0));
        BtnEliminarAdmin.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        BtnEliminarAdmin.setForeground(new java.awt.Color(255, 255, 255));
        BtnEliminarAdmin.setText("Eliminar Admin");
        BtnEliminarAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarAdminActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Emoji", 0, 24)); // NOI18N
        jLabel6.setText("Buscar admin");

        BtnBuscarAdmin.setBackground(new java.awt.Color(0, 0, 0));
        BtnBuscarAdmin.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        BtnBuscarAdmin.setForeground(new java.awt.Color(255, 255, 255));
        BtnBuscarAdmin.setText("Buscar");
        BtnBuscarAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBuscarAdminActionPerformed(evt);
            }
        });

        BtnEditar.setBackground(new java.awt.Color(0, 0, 0));
        BtnEditar.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        BtnEditar.setForeground(new java.awt.Color(255, 255, 255));
        BtnEditar.setText("Editar");
        BtnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEditarActionPerformed(evt);
            }
        });

        BtnNuevoAdmin.setBackground(new java.awt.Color(0, 0, 0));
        BtnNuevoAdmin.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        BtnNuevoAdmin.setForeground(new java.awt.Color(255, 255, 255));
        BtnNuevoAdmin.setText("Nuevo Admin");
        BtnNuevoAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnNuevoAdminActionPerformed(evt);
            }
        });

        BtnActivarDesactivarAdmin.setBackground(new java.awt.Color(0, 0, 0));
        BtnActivarDesactivarAdmin.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        BtnActivarDesactivarAdmin.setForeground(new java.awt.Color(255, 255, 255));
        BtnActivarDesactivarAdmin.setText("Activar/Desactivar");
        BtnActivarDesactivarAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnActivarDesactivarAdminActionPerformed(evt);
            }
        });

        BtnRegresar.setBackground(new java.awt.Color(0, 0, 0));
        BtnRegresar.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        BtnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        BtnRegresar.setText("Regresar");
        BtnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(BtnNuevoAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnActivarDesactivarAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(BtnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BtnEliminarAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                        .addGap(17, 17, 17))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(409, 409, 409)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnBuscarAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnBuscarAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(13, 13, 13)
                        .addComponent(BtnNuevoAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(BtnActivarDesactivarAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BtnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(BtnEliminarAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnEliminarAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarAdminActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un administrador para eliminar.", "Ningún administrador seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int adminId = (int) jTable1.getValueAt(selectedRow, 0);
            String nombreUsuario = (String) jTable1.getValueAt(selectedRow, 1);
            boolean esAdminMaestro = jTable1.getValueAt(selectedRow, 5).equals("Maestro");

            AdministradorDatos adminDatos = new AdministradorDatos();

            if (esAdminMaestro) {
                int numAdminsMaestros = adminDatos.contarAdministradoresMaestros();
                int numAdminsActivos = adminDatos.contarAdministradoresActivos();

                if (numAdminsMaestros <= 1 && numAdminsActivos <= 1) {
                    JOptionPane.showMessageDialog(this, "No se puede eliminar al único Administrador Maestro activo.", "Acción no permitida", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (numAdminsMaestros <= 1 && numAdminsActivos > 1) {
                    // Intentando eliminar el único admin maestro, pero hay otros admins
                    List<Administrador> otrosAdmins = adminDatos.listarTodos().stream()
                            .filter(a -> a.id() != adminId && a.activo())
                            .toList();

                    if (otrosAdmins.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No hay otros administradores activos para transferir el rol de Maestro.", "Acción no permitida", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    Administrador[] posiblesNuevosMaestros = otrosAdmins.toArray(new Administrador[0]);
                    Administrador nuevoMaestroSeleccionado = (Administrador) JOptionPane.showInputDialog(
                            this,
                            "Debe transferir el rol de Administrador Maestro.\nSeleccione un nuevo Administrador Maestro:",
                            "Transferir Rol Maestro",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            posiblesNuevosMaestros,
                            posiblesNuevosMaestros[0]
                    );

                    if (nuevoMaestroSeleccionado == null) {
                        JOptionPane.showMessageDialog(this, "Debe seleccionar un nuevo Administrador Maestro para poder eliminar al actual.", "Transferencia cancelada", JOptionPane.WARNING_MESSAGE);
                        return; // El usuario canceló la selección
                    }

                    // Obtener el administrador actual que se va a eliminar y dejará de ser maestro
                    java.util.Optional<Administrador> adminActualOpt = adminDatos.buscarPorId(adminId);
                    if (adminActualOpt.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No se encontró el administrador maestro actual en la base de datos.", "Error Interno", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    Administrador adminActual = adminActualOpt.get();

                    // 1. Degradar al administrador actual (quitarle el rol de maestro)
                    Administrador adminActualDegradado = new Administrador(
                            adminActual.id(), adminActual.usuario(), adminActual.hash(),
                            adminActual.nombreCompleto(), adminActual.correo(),
                            adminActual.activo(), false // esAdminMaestro = false
                    );
                    boolean degradacionExitosa = adminDatos.actualizar(adminActualDegradado);
                    if (!degradacionExitosa) {
                        JOptionPane.showMessageDialog(this, "Error al degradar al actual Administrador Maestro.", "Error de Actualización", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // 2. Promover al nuevo administrador maestro
                    Administrador nuevoMaestroPromovido = new Administrador(
                            nuevoMaestroSeleccionado.id(), nuevoMaestroSeleccionado.usuario(), nuevoMaestroSeleccionado.hash(),
                            nuevoMaestroSeleccionado.nombreCompleto(), nuevoMaestroSeleccionado.correo(),
                            nuevoMaestroSeleccionado.activo(), true // esAdminMaestro = true
                    );
                    boolean promocionExitosa = adminDatos.actualizar(nuevoMaestroPromovido);
                    if (!promocionExitosa) {
                        // Intentar revertir la degradación si la promoción falla
                        adminDatos.actualizar(new Administrador(
                                adminActual.id(), adminActual.usuario(), adminActual.hash(),
                                adminActual.nombreCompleto(), adminActual.correo(),
                                adminActual.activo(), true // Revertir a esAdminMaestro = true
                        ));
                        JOptionPane.showMessageDialog(this, "Error al promover al nuevo Administrador Maestro. Se ha intentado revertir la degradación del anterior.", "Error de Actualización", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    // Actualizar la variable esAdminMaestro a false para el admin que se va a eliminar,
                    // ya que el rol ha sido transferido.
                    esAdminMaestro = false;
                }
            }


            // Si el administrador es maestro y es el único activo, ya se habrá bloqueado la eliminación antes.
            // Si era maestro y el rol se transfirió, esAdminMaestro ahora es false.
            // Si no era maestro, esAdminMaestro ya era false.
            // Por lo tanto, aquí no necesitamos verificar esAdminMaestro para la confirmación de eliminación.

            String mensajeConfirmacion = String.format("¿Está seguro de que desea eliminar al administrador '%s'? Esta acción no se puede deshacer.", nombreUsuario);
            int confirmacion = JOptionPane.showConfirmDialog(this, mensajeConfirmacion, "Confirmar Eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirmacion == JOptionPane.YES_OPTION) {
                // Verificar si el administrador tiene ventas asociadas ANTES de intentar eliminar
                datos.VentaDatos ventaDatos = new datos.VentaDatos();
                boolean tieneVentas = false;
                try {
                    tieneVentas = ventaDatos.existenVentasParaAdministrador(adminId);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error al verificar las ventas del administrador: " + e.getMessage(), "Error de Verificación", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    return; // No proceder si hay error verificando ventas
                }

                if (tieneVentas) {
                    JOptionPane.showMessageDialog(this, "El administrador '" + nombreUsuario + "' no puede ser eliminado porque tiene ventas asociadas.", "Eliminación no permitida", JOptionPane.ERROR_MESSAGE);
                    return; // No proceder con la eliminación
                }

                boolean exito = adminDatos.eliminar(adminId);

                if (exito) {
                    JOptionPane.showMessageDialog(this, "Administrador '" + nombreUsuario + "' eliminado correctamente.", "Eliminación Exitosa", JOptionPane.INFORMATION_MESSAGE);
                    cargarAdministradores(); // Refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el administrador. Verifique si tiene dependencias o consulte los logs.", "Error de Eliminación", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al procesar la solicitud de eliminación: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // For developer logging
        }
    }//GEN-LAST:event_BtnEliminarAdminActionPerformed

    private void BtnBuscarAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBuscarAdminActionPerformed
        String termino = txtBuscar.getText().trim();
        AdministradorDatos adminDatos = new AdministradorDatos();

        try {
            if (termino.isEmpty()) {
                cargarAdministradores(); // Reload all if search term is empty
            } else {
                List<Administrador> administradores = adminDatos.buscarPorTermino(termino);
                actualizarTabla(administradores);
                if (administradores.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No se encontraron administradores que coincidan con: '" + termino + "'", "Búsqueda sin resultados", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar administradores: " + e.getMessage(), "Error de Búsqueda", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // For developer logging
        }
    }//GEN-LAST:event_BtnBuscarAdminActionPerformed

    private void BtnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEditarActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un administrador de la tabla para editar.", "Ningún administrador seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int adminId = (int) jTable1.getValueAt(selectedRow, 0);
            AdministradorDatos adminDatos = new AdministradorDatos();
            java.util.Optional<Administrador> adminOpt = adminDatos.buscarPorId(adminId);

            if (adminOpt.isPresent()) {
                Administrador adminParaEditar = adminOpt.get();
                CrearAdminFrame editarFrame = new CrearAdminFrame(adminParaEditar);

                editarFrame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                        cargarAdministradores(); // Refresh table after edit frame is closed
                        if (editarFrame.editorPerdioRolMaestro()) {
                            // El editor (usuario actual) ya no es Admin Maestro.
                            // Cerrar esta ventana y mostrar el login.
                            JOptionPane.showMessageDialog(Gestion_Administradores.this,
                                    "Su rol de Administrador Maestro ha sido transferido.\nDebe iniciar sesión nuevamente.",
                                    "Rol Transferido", JOptionPane.INFORMATION_MESSAGE);
                            new LoginFrame().setVisible(true);
                            Gestion_Administradores.this.dispose();
                        }
                    }
                });
                editarFrame.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "El administrador seleccionado no fue encontrado. Puede haber sido eliminado.", "Administrador no encontrado", JOptionPane.ERROR_MESSAGE);
                cargarAdministradores(); // Refresh table as a precaution
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al intentar editar el administrador: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // For developer logging
        }
    }//GEN-LAST:event_BtnEditarActionPerformed

    private void BtnNuevoAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnNuevoAdminActionPerformed
        CrearAdminFrame crearAdminFrame = new CrearAdminFrame();
        crearAdminFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                cargarAdministradores();
                // Aunque editorPerdioRolMaestro es principalmente para el flujo de edición,
                // lo mantenemos aquí por consistencia estructural del listener.
                // En la práctica, no se espera que sea true en el flujo de nueva creación
                // según la lógica actual de CrearAdminFrame.
                if (crearAdminFrame.editorPerdioRolMaestro()) {
                    JOptionPane.showMessageDialog(Gestion_Administradores.this,
                            "Su rol de Administrador Maestro ha sido afectado.\nDebe iniciar sesión nuevamente.",
                            "Rol Modificado", JOptionPane.INFORMATION_MESSAGE);
                    new LoginFrame().setVisible(true);
                    Gestion_Administradores.this.dispose();
                }
            }
        });
        crearAdminFrame.setVisible(true);
    }//GEN-LAST:event_BtnNuevoAdminActionPerformed

    private void BtnActivarDesactivarAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnActivarDesactivarAdminActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un administrador de la tabla.", "Ningún administrador seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int adminId = (int) jTable1.getValueAt(selectedRow, 0);
            String nombreUsuario = (String) jTable1.getValueAt(selectedRow, 1); // For confirmation dialog
            String estadoActualStr = (String) jTable1.getValueAt(selectedRow, 4);
            boolean esAdminMaestro = jTable1.getValueAt(selectedRow, 5).equals("Maestro");
            boolean estadoActual = estadoActualStr.equals("Sí");
            boolean nuevoEstado = !estadoActual; // Intentar cambiar a este estado

            AdministradorDatos adminDatos = new AdministradorDatos();

            // Prevenir la desactivación del único administrador maestro activo
            if (esAdminMaestro && estadoActual && !nuevoEstado) { // Si es maestro, está activo y se intenta desactivar
                int numAdminsMaestrosActivos = 0;
                List<Administrador> todosLosAdmins = adminDatos.listarTodos();
                for (Administrador admin : todosLosAdmins) {
                    if (admin.adminMaestro() && admin.activo()) {
                        numAdminsMaestrosActivos++;
                    }
                }
                // O podríamos usar adminDatos.contarAdministradoresMaestros() si solo nos importan los maestros en general,
                // pero para desactivación, es más relevante cuántos *activos* maestros quedarían.
                // Sin embargo, la regla es sobre *el* admin maestro. Si es el único, no se desactiva.
                // Contar todos los admins activos es más simple para la regla "no puede quedar sin admins activos"
                long otrosAdminsActivosNoMaestros = todosLosAdmins.stream()
                        .filter(a -> a.id() != adminId && a.activo() && !a.adminMaestro())
                        .count();
                long otrosAdminsMaestrosActivos = todosLosAdmins.stream()
                        .filter(a -> a.id() != adminId && a.adminMaestro() && a.activo())
                        .count();


                if (adminDatos.contarAdministradoresMaestros() <= 1 && adminDatos.contarAdministradoresActivos() == 1) {
                     JOptionPane.showMessageDialog(this,
                            "No se puede desactivar al único Administrador Maestro activo si no hay otros administradores activos.",
                            "Acción no permitida", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                 if (esAdminMaestro && adminDatos.contarAdministradoresMaestros() <=1 && !nuevoEstado && (otrosAdminsActivosNoMaestros + otrosAdminsMaestrosActivos ==0) ){
                     JOptionPane.showMessageDialog(this,
                            "No se puede desactivar al único Administrador Maestro si es el único administrador activo.",
                            "Acción no permitida", JOptionPane.ERROR_MESSAGE);
                    return;
                 }


            }


            String nuevoEstadoStr = nuevoEstado ? "Activo" : "Inactivo";
            String mensajeConfirmacion = String.format("¿Desea cambiar el estado de '%s' a '%s'?", nombreUsuario, nuevoEstadoStr);
            int confirmacion = JOptionPane.showConfirmDialog(this, mensajeConfirmacion, "Confirmar Cambio de Estado", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                boolean exito = adminDatos.actualizarEstadoActivo(adminId, nuevoEstado);

                if (exito) {
                    JOptionPane.showMessageDialog(this, "Estado del administrador actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    cargarAdministradores(); // Refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Error al actualizar el estado del administrador.", "Error de Actualización", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al procesar la solicitud: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // For developer logging
        }
    }//GEN-LAST:event_BtnActivarDesactivarAdminActionPerformed

    private void BtnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRegresarActionPerformed
        new ui.menu.Menu_Principal().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BtnRegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gestion_Administradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gestion_Administradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gestion_Administradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gestion_Administradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gestion_Administradores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnActivarDesactivarAdmin;
    private javax.swing.JButton BtnBuscarAdmin;
    private javax.swing.JButton BtnEditar;
    private javax.swing.JButton BtnEliminarAdmin;
    private javax.swing.JButton BtnNuevoAdmin;
    private javax.swing.JButton BtnRegresar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
